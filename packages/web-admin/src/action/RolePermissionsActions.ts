import { ThunkAction } from "redux-thunk";
import { AnyAction } from "redux";
import { AxiosError, AxiosResponse } from "axios";
import { API_ENDPOINT } from "../Config/APIs";
import AdminConfig from "../Config/index";
import http from "../Utils/Http";
import { RootState } from "../store"; // ‚ö†Ô∏è C·∫≠p nh·∫≠t ƒë√∫ng ƒë∆∞·ªùng d·∫´n store c·ªßa b·∫°n

// ------------------------------
// üîπ Action Types
// ------------------------------
export const FETCH_ROLEPERMISSIONS_REQUEST = "FETCH_ROLEPERMISSIONS_REQUEST" as const;
export const FETCH_ROLEPERMISSIONS_SUCCESS = "FETCH_ROLEPERMISSIONS_SUCCESS" as const;
export const FETCH_ROLEPERMISSIONS_FAILURE = "FETCH_ROLEPERMISSIONS_FAILURE" as const;
export const SET_CURRENT_PAGE = "SET_CURRENT_PAGE" as const;

// ------------------------------
// üîπ Interface cho d·ªØ li·ªáu RolePermission
// ------------------------------
export interface RolePermission {
  id: number;
  role_id: number;
  permission_id: number;
  [key: string]: any;
}

export interface RolePermissionResponse {
  results: RolePermission[];
  totalCount?: number;
  totalPages?: number;
  currentPage?: number;
}

// ------------------------------
// üîπ Action Creators
// ------------------------------
export const fetchRolePermissionsRequest = () => ({
  type: FETCH_ROLEPERMISSIONS_REQUEST,
});

export const fetchRolePermissionsSuccess = (
  results: RolePermission[],
  totalCount?: number,
  totalPages?: number,
  currentPage?: number
) => ({
  type: FETCH_ROLEPERMISSIONS_SUCCESS,
  payload: { results, totalCount, totalPages, currentPage },
});

export const fetchRolePermissionsFailure = (error: string) => ({
  type: FETCH_ROLEPERMISSIONS_FAILURE,
  payload: error,
});

export const setCurrentPage = (page: number) => ({
  type: SET_CURRENT_PAGE,
  payload: page,
});

// ------------------------------
// üîπ Type Helper
// ------------------------------
type AppThunk<ReturnType = void> = ThunkAction<
  ReturnType,
  RootState,
  unknown,
  AnyAction
>;

// ------------------------------
// üîπ Fetch RolePermissions theo roleId
// ------------------------------
export const fetchRolePermissions =
  (roleId: number): AppThunk =>
  async (dispatch) => {
    dispatch(fetchRolePermissionsRequest());
    try {
      const url = new URL(`${API_ENDPOINT}/${AdminConfig.routes.rolesPermissions}`);
      url.searchParams.append("role_id", roleId.toString());

      const response: AxiosResponse<RolePermissionResponse> = await http.get(url.toString());
      const { results, totalCount, totalPages, currentPage } = response.data;

      dispatch(fetchRolePermissionsSuccess(results, totalCount, totalPages, currentPage));
    } catch (error) {
      const err = error as AxiosError;
      const message =
        (err.response?.data as any)?.error || err.message || "L·ªói khi t·∫£i quy·ªÅn vai tr√≤.";
      dispatch(fetchRolePermissionsFailure(message));
    }
  };

// ------------------------------
// üîπ Th√™m RolePermissions
// ------------------------------
export const addRolePermissions =
  (rolesPermissions: Partial<RolePermission>[]): AppThunk<Promise<void>> =>
  async (dispatch) => {
    dispatch(fetchRolePermissionsRequest());
    try {
      await http.post(`${API_ENDPOINT}/${AdminConfig.routes.rolesPermissions}`, rolesPermissions);
      return Promise.resolve();
    } catch (error) {
      const err = error as AxiosError;
      if (err.response) {
        const status = err.response.status;
        switch (status) {
          case 409:
            throw new Error("ƒê√£ x·∫£y ra l·ªói: D·ªØ li·ªáu b·ªã tr√πng l·∫∑p.");
          case 400:
            throw new Error(
              `Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá: ${
                (err.response.data as any)?.message || "Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu."
              }`
            );
          case 404:
            throw new Error("T√†i nguy√™n kh√¥ng t√¨m th·∫•y: Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.");
          case 500:
            throw new Error("L·ªói m√°y ch·ªß: ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω y√™u c·∫ßu.");
          default:
            throw new Error(`ƒê√£ x·∫£y ra l·ªói: ${(err.response.data as any)?.message || err.message}`);
        }
      } else {
        throw new Error("ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.");
      }
    }
  };

// ------------------------------
// üîπ C·∫≠p nh·∫≠t RolePermission
// ------------------------------
export const updateRolePermissions =
  (id: number, data: Partial<RolePermission>): AppThunk =>
  async (dispatch) => {
    dispatch(fetchRolePermissionsRequest());
    try {
      await http.patch(`${API_ENDPOINT}/${AdminConfig.routes.rolesPermissions}/${id}`, data);
      dispatch(fetchRolePermissions(data.role_id ?? 0));
    } catch (error) {
      const err = error as AxiosError;
      const message =
        (err.response?.data as any)?.message || err.message || "L·ªói khi c·∫≠p nh·∫≠t quy·ªÅn vai tr√≤.";
      dispatch(fetchRolePermissionsFailure(message));
    }
  };

// ------------------------------
// üîπ X√≥a RolePermission
// ------------------------------
export const deleteRolePermissions =
  (id: number, roleId?: number): AppThunk =>
  async (dispatch) => {
    dispatch(fetchRolePermissionsRequest());
    try {
      await http.delete(`${API_ENDPOINT}/${AdminConfig.routes.rolesPermissions}/${id}`);
      if (roleId) dispatch(fetchRolePermissions(roleId));
    } catch (error) {
      const err = error as AxiosError;
      const message =
        (err.response?.data as any)?.message || err.message || "L·ªói khi x√≥a quy·ªÅn vai tr√≤.";
      dispatch(fetchRolePermissionsFailure(message));
    }
  };
