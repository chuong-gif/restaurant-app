import { Request, Response } from 'express';
import * as roleService from '../services/role.service'; // Import c√°c h√†m x·ª≠ l√Ω logic t·ª´ role.service

// üìò L·∫•y danh s√°ch vai tr√≤ (c√≥ ph√¢n trang v√† t√¨m ki·∫øm)
export const handleGetRoles = async (req: Request, res: Response) => {
    try {
        // L·∫•y c√°c tham s·ªë t·ª´ query string (?search=&page=&limit=)
        const search = (req.query.search as string) || '';
        const page = parseInt(req.query.page as string) || 1;
        const pageSize = parseInt(req.query.limit as string) || 10;

        // G·ªçi service ƒë·ªÉ l·∫•y danh s√°ch vai tr√≤
        const result = await roleService.getRoles(search, page, pageSize);

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        res.status(200).json({ message: 'L·∫•y danh s√°ch vai tr√≤ th√†nh c√¥ng', ...result });
    } catch (error: any) {
        // X·ª≠ l√Ω l·ªói m√°y ch·ªß
        res.status(500).json({ message: error.message });
    }
};

// üìò L·∫•y th√¥ng tin chi ti·∫øt m·ªôt vai tr√≤ theo ID
export const handleGetRoleById = async (req: Request, res: Response) => {
    try {
        const id = parseInt(req.params.id); // L·∫•y ID t·ª´ URL params
        const role = await roleService.getRoleById(id); // G·ªçi service l·∫•y d·ªØ li·ªáu vai tr√≤
        res.status(200).json(role); // Tr·∫£ d·ªØ li·ªáu v·ªÅ client
    } catch (error: any) {
        // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ l·ªói 404
        res.status(404).json({ message: error.message });
    }
};

// üìò T·∫°o m·ªõi m·ªôt vai tr√≤
export const handleCreateRole = async (req: Request, res: Response) => {
    try {
        // G·ª≠i d·ªØ li·ªáu t·ª´ body sang service ƒë·ªÉ t·∫°o m·ªõi
        const newRole = await roleService.createRole(req.body);
        res.status(201).json({ message: 'T·∫°o vai tr√≤ th√†nh c√¥ng', data: newRole });
    } catch (error: any) {
        // L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o ho·∫∑c logic
        res.status(400).json({ message: error.message });
    }
};

// üìò C·∫≠p nh·∫≠t th√¥ng tin vai tr√≤
export const handleUpdateRole = async (req: Request, res: Response) => {
    try {
        const id = parseInt(req.params.id); // L·∫•y ID t·ª´ URL
        const updatedRole = await roleService.updateRole(id, req.body); // C·∫≠p nh·∫≠t th√¥ng tin vai tr√≤
        res.status(200).json({ message: 'C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng', data: updatedRole });
    } catch (error: any) {
        // X·ª≠ l√Ω l·ªói c·∫≠p nh·∫≠t
        res.status(400).json({ message: error.message });
    }
};

// üìò X√≥a m·ªôt vai tr√≤ theo ID
export const handleDeleteRole = async (req: Request, res: Response) => {
    try {
        const id = parseInt(req.params.id); // L·∫•y ID t·ª´ URL
        await roleService.deleteRole(id); // G·ªçi service ƒë·ªÉ x√≥a vai tr√≤
        res.status(200).json({ message: 'X√≥a vai tr√≤ th√†nh c√¥ng' }); // Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
    } catch (error: any) {
        // X·ª≠ l√Ω l·ªói (v√≠ d·ª•: ID kh√¥ng t·ªìn t·∫°i)
        res.status(400).json({ message: error.message });
    }
};

// üìò G√°n quy·ªÅn h·∫°n (permissions) cho m·ªôt vai tr√≤
export const handleAssignPermissions = async (req: Request, res: Response) => {
    try {
        const roleId = parseInt(req.params.id); // ID c·ªßa vai tr√≤ c·∫ßn g√°n quy·ªÅn
        const { permissionIds } = req.body; // L·∫•y danh s√°ch ID quy·ªÅn h·∫°n t·ª´ body

        // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
        if (!Array.isArray(permissionIds)) {
            return res.status(400).json({ message: 'permissionIds ph·∫£i l√† m·ªôt m·∫£ng.' });
        }

        // G·ªçi service ƒë·ªÉ g√°n quy·ªÅn cho vai tr√≤
        await roleService.assignPermissionsToRole(roleId, permissionIds);

        // Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
        res.status(200).json({ message: 'Ph√¢n quy·ªÅn cho vai tr√≤ th√†nh c√¥ng.' });
    } catch (error: any) {
        // L·ªói h·ªá th·ªëng ho·∫∑c service
        res.status(500).json({ message: error.message });
    }
};
