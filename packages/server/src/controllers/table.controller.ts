import { Request, Response } from 'express';
import * as tableService from '../services/table.service'; // Import c√°c h√†m x·ª≠ l√Ω logic b√†n ƒÉn t·ª´ service
import { Prisma } from '@prisma/client'; // Import Prisma ƒë·ªÉ x·ª≠ l√Ω l·ªói ƒë·∫∑c th√π t·ª´ database

// üìò [ADMIN] L·∫•y danh s√°ch t·∫•t c·∫£ b√†n ƒÉn (c√≥ ph√¢n trang, t√¨m ki·∫øm, l·ªçc theo s·ª©c ch·ª©a)
export const handleGetTablesAdmin = async (req: Request, res: Response) => {
    try {
        // L·∫•y gi√° tr·ªã t√¨m ki·∫øm t√™n b√†n n·∫øu c√≥, m·∫∑c ƒë·ªãnh r·ªóng
        const search = (req.query.search as string) || '';
        // L·ªçc theo s·ª©c ch·ª©a (n·∫øu c√≥ truy·ªÅn v√†o query)
        const capacity = req.query.searchCapacity ? parseInt(req.query.searchCapacity as string) : undefined;
        // L·∫•y trang hi·ªán t·∫°i (page) v√† s·ªë l∆∞·ª£ng m·ªói trang (limit)
        const page = parseInt(req.query.page as string) || 1;
        const pageSize = parseInt(req.query.limit as string) || 10;

        // G·ªçi service ƒë·ªÉ truy v·∫•n danh s√°ch b√†n theo ƒëi·ªÅu ki·ªán
        const result = await tableService.getTablesAdmin(search, capacity, page, pageSize);

        // Tr·∫£ k·∫øt qu·∫£ th√†nh c√¥ng cho client
        res.status(200).json({ message: 'L·∫•y danh s√°ch b√†n th√†nh c√¥ng', ...result });
    } catch (error: any) {
        // B·∫Øt l·ªói t·ªïng qu√°t (l·ªói h·ªá th·ªëng, DB, v.v.)
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
    }
};

// üìò L·ªçc b√†n tr·ªëng theo ng√†y (ƒë·ªÉ ng∆∞·ªùi d√πng ho·∫∑c admin xem b√†n c√≤n tr·ªëng)
export const handleFilterByDate = async (req: Request, res: Response) => {
    try {
        // L·∫•y ng√†y c·∫ßn ki·ªÉm tra (n·∫øu kh√¥ng c√≥ th√¨ l·∫•y ng√†y hi·ªán t·∫°i)
        const date = req.query.date ? new Date(req.query.date as string) : new Date();
        // L·ªçc th√™m theo s·ª©c ch·ª©a (n·∫øu c√≥)
        const capacity = req.query.searchCapacity ? parseInt(req.query.searchCapacity as string) : undefined;

        // G·ªçi service ƒë·ªÉ l·∫•y danh s√°ch b√†n tr·ªëng theo ng√†y v√† s·ª©c ch·ª©a
        const availableTables = await tableService.findAvailableTablesByDate(date, capacity);

        // Tr·∫£ k·∫øt qu·∫£ danh s√°ch b√†n tr·ªëng
        res.status(200).json({ message: 'L·∫•y danh s√°ch b√†n tr·ªëng theo ng√†y th√†nh c√¥ng', results: availableTables });
    } catch (error: any) {
        // B·∫Øt l·ªói m√°y ch·ªß ho·∫∑c l·ªói x·ª≠ l√Ω logic
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
    }
};

// üìò T·∫°o m·ªõi m·ªôt b√†n ƒÉn trong h·ªá th·ªëng
export const handleCreateTable = async (req: Request, res: Response) => {
    try {
        // G·ª≠i d·ªØ li·ªáu sang service ƒë·ªÉ t·∫°o b√†n m·ªõi
        const newTable = await tableService.createTable(req.body);

        // Ph·∫£n h·ªìi khi t·∫°o th√†nh c√¥ng
        res.status(201).json({ message: 'T·∫°o b√†n th√†nh c√¥ng', data: newTable });
    } catch (error: any) {
        // N·∫øu l·ªói tr√πng s·ªë b√†n (Prisma l·ªói P2002 - unique constraint)
        if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002') {
            return res.status(409).json({ message: 'S·ªë b√†n ƒë√£ t·ªìn t·∫°i.' });
        }
        // L·ªói kh√°c (m√°y ch·ªß, d·ªØ li·ªáu sai, v.v.)
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
    }
};

// üìò C·∫≠p nh·∫≠t th√¥ng tin b√†n (v√≠ d·ª•: s·ªë b√†n, s·ª©c ch·ª©a, tr·∫°ng th√°i)
export const handleUpdateTable = async (req: Request, res: Response) => {
    try {
        const id = parseInt(req.params.id); // L·∫•y ID b√†n t·ª´ URL
        // G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu b√†n
        const updatedTable = await tableService.updateTable(id, req.body);

        // Ph·∫£n h·ªìi th√†nh c√¥ng
        res.status(200).json({ message: 'C·∫≠p nh·∫≠t b√†n th√†nh c√¥ng', data: updatedTable });
    } catch (error: any) {
        // N·∫øu tr√πng s·ªë b√†n (unique constraint)
        if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002') {
            return res.status(409).json({ message: 'S·ªë b√†n ƒë√£ t·ªìn t·∫°i.' });
        }
        // L·ªói kh√°c
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
    }
};

// üìò X√≥a b√†n ƒÉn theo ID
export const handleDeleteTable = async (req: Request, res: Response) => {
    try {
        const id = parseInt(req.params.id); // L·∫•y ID b√†n t·ª´ params
        await tableService.deleteTable(id); // G·ªçi service ƒë·ªÉ x√≥a b√†n
        res.status(200).json({ message: 'X√≥a b√†n th√†nh c√¥ng' }); // Ph·∫£n h·ªìi k·∫øt qu·∫£
    } catch (error: any) {
        // N·∫øu c√≥ l·ªói (v√≠ d·ª•: b√†n kh√¥ng t·ªìn t·∫°i)
        res.status(400).json({ message: error.message });
    }
};
