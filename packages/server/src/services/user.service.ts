// üì¶ Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import prisma from '../models';
import { Prisma, nguoi_dung_loai_nguoi_dung as UserType } from '@prisma/client';
import bcrypt from 'bcrypt';

const saltRounds = 10; // üîê S·ªë v√≤ng m√£ h√≥a m·∫≠t kh·∫©u

// üë• L·∫§Y DANH S√ÅCH NG∆Ø·ªúI D√ôNG (C√≥ ph√¢n trang, t√¨m ki·∫øm, l·ªçc)
export const getUsers = async (filters: {
    page: number;
    pageSize: number;
    search: string;
    status?: number;
    roleId?: number;
    userType?: UserType;
}) => {
    const { page, pageSize, search, status, roleId, userType } = filters;

    const where: Prisma.nguoi_dungWhereInput = {
        ho_ten: { contains: search },
        trang_thai: status !== undefined ? status === 1 : undefined,
        vai_tro_id: roleId,
        loai_nguoi_dung: userType,
    };

    const [users, total] = await prisma.$transaction([
        prisma.nguoi_dung.findMany({
            where,
            select: { // üß© Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt, kh√¥ng bao gi·ªù l·∫•y m·∫≠t kh·∫©u
                id: true,
                ho_ten: true,
                tai_khoan: true,
                email: true,
                dien_thoai: true,
                dia_chi: true,
                trang_thai: true,
                loai_nguoi_dung: true,
                vai_tro_id: true,
                luong: true,
                created_at: true,
                media_files: {
                    select: { file_url: true },
                },
            },
            orderBy: { id: 'desc' },
            skip: (page - 1) * pageSize,
            take: pageSize,
        }),
        prisma.nguoi_dung.count({ where }),
    ]);

    return {
        data: users,
        total,
        totalPages: Math.ceil(total / pageSize),
        currentPage: page,
    };
};

// üîé L·∫§Y CHI TI·∫æT NG∆Ø·ªúI D√ôNG THEO ID
export const getUserById = async (id: number) => {
    const user = await prisma.nguoi_dung.findUnique({
        where: { id },
        select: {
            id: true,
            ho_ten: true,
            tai_khoan: true,
            email: true,
            dien_thoai: true,
            dia_chi: true,
            trang_thai: true,
            loai_nguoi_dung: true,
            vai_tro_id: true,
            luong: true,
            media_files: { select: { file_url: true } },
        },
    });
    if (!user) throw new Error('‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.');
    return user;
};

// ‚ú® T·∫†O NG∆Ø·ªúI D√ôNG M·ªöI
export const createUser = async (data: any) => {
    const { password, ...userData } = data;

    // ‚ö†Ô∏è Ki·ªÉm tra email tr√πng
    const existingUser = await prisma.nguoi_dung.findUnique({ where: { email: userData.email } });
    if (existingUser) throw new Error('üìß Email ƒë√£ t·ªìn t·∫°i.');

    const hashedPassword = password ? await bcrypt.hash(password, saltRounds) : '';

    return prisma.nguoi_dung.create({
        data: {
            ...userData,
            mat_khau: hashedPassword,
        },
    });
};

// üîÑ C·∫¨P NH·∫¨T TH√îNG TIN NG∆Ø·ªúI D√ôNG
export const updateUser = async (id: number, data: any) => {
    const { password, ...updates } = data;
    if (password) updates.mat_khau = await bcrypt.hash(password, saltRounds);

    return prisma.nguoi_dung.update({
        where: { id },
        data: updates,
    });
};

// üóëÔ∏è X√ìA NG∆Ø·ªúI D√ôNG (k√®m ki·ªÉm tra r√†ng bu·ªôc)
export const deleteUser = async (id: number) => {
    // ‚öôÔ∏è Kh√¥ng cho x√≥a n·∫øu ng∆∞·ªùi d√πng ƒë√£ c√≥ l·ªãch s·ª≠ ƒë·∫∑t b√†n
    const reservationCount = await prisma.dat_ban.count({ where: { khach_hang_id: id } });
    if (reservationCount > 0) {
        throw new Error('üö´ Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng n√†y v√¨ h·ªç ƒë√£ c√≥ l·ªãch s·ª≠ ƒë·∫∑t b√†n.');
    }

    return prisma.nguoi_dung.delete({ where: { id } });
};

// üîê KI·ªÇM TRA M·∫¨T KH·∫®U HI·ªÜN T·∫†I
export const checkCurrentPassword = async (email: string, currentPassword: string) => {
    const user = await prisma.nguoi_dung.findUnique({ where: { email } });
    if (!user) throw new Error('‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.');

    const isMatch = await bcrypt.compare(currentPassword, user.mat_khau);
    if (!isMatch) throw new Error('‚ö†Ô∏è M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c.');

    return true;
};
