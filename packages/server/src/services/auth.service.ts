// packages/server/src/services/auth.service.ts
import prisma from '../models';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { nguoi_dung_loai_nguoi_dung as UserType } from '@prisma/client';

const JWT_SECRET = process.env.JWT_SECRET_KEY || 'your-default-secret-key'; // üîê Kh√≥a b√≠ m·∫≠t d√πng ƒë·ªÉ k√Ω JWT

// üß© H√†m helper t·∫°o token JWT t·ª´ th√¥ng tin ng∆∞·ªùi d√πng
const generateToken = (user: { id: number; email: string; ho_ten: string; anh_dai_dien_id: number | null }) => {
    const payload = {
        id: user.id,
        email: user.email,
        name: user.ho_ten,
        avatar: user.anh_dai_dien_id // L∆∞u ID ·∫£nh ƒë·∫°i di·ªán n·∫øu c√≥
    };
    // K√Ω JWT c√≥ th·ªùi h·∫°n 3 ti·∫øng
    return jwt.sign(payload, JWT_SECRET, { expiresIn: '3h' });
};

// --- üåê D·ªãch v·ª• cho Kh√°ch h√†ng ---

// üì± X·ª≠ l√Ω ƒëƒÉng nh·∫≠p b·∫±ng m·∫°ng x√£ h·ªôi (Google, Facebook)
export const handleSocialLogin = async (email: string, fullname: string, avatarUrl: string | null) => {
    // T√¨m ng∆∞·ªùi d√πng theo email
    let user = await prisma.nguoi_dung.findUnique({
        where: { email },
    });

    // N·∫øu ch∆∞a t·ªìn t·∫°i ‚Üí t·∫°o m·ªõi ng∆∞·ªùi d√πng
    if (!user) {
        user = await prisma.nguoi_dung.create({
            data: {
                ho_ten: fullname,
                email: email,
                mat_khau: '', // M·∫≠t kh·∫©u tr·ªëng v√¨ t√†i kho·∫£n ƒëƒÉng nh·∫≠p qua m·∫°ng x√£ h·ªôi
                loai_nguoi_dung: UserType.Kh_ch_H_ng, // M·∫∑c ƒë·ªãnh l√† kh√°ch h√†ng
                // C√≥ th·ªÉ th√™m logic l∆∞u avatar v√†o media_files n·∫øu c·∫ßn
            },
        });
    }

    // T·∫°o JWT token cho user
    const token = generateToken(user);
    const { mat_khau, ...userWithoutPassword } = user; // X√≥a m·∫≠t kh·∫©u kh·ªèi d·ªØ li·ªáu tr·∫£ v·ªÅ
    return { user: userWithoutPassword, token };
};

// üìù ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
export const registerUser = async (userData: any) => {
    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await prisma.nguoi_dung.findUnique({ where: { email: userData.email } });
    if (existingUser) {
        throw new Error('Email ƒë√£ t·ªìn t·∫°i.');
    }

    // M√£ h√≥a m·∫≠t kh·∫©u b·∫±ng bcrypt
    const hashedPassword = await bcrypt.hash(userData.password, 10);

    // T·∫°o m·ªõi ng∆∞·ªùi d√πng trong DB
    const newUser = await prisma.nguoi_dung.create({
        data: {
            ho_ten: userData.fullname,
            email: userData.email,
            dien_thoai: userData.tel,
            dia_chi: userData.address,
            mat_khau: hashedPassword,
            loai_nguoi_dung: UserType.Kh_ch_H_ng, // G√°n lo·∫°i ng∆∞·ªùi d√πng l√† kh√°ch h√†ng
        },
    });

    // üî∞ T·∫°o th·∫ª th√†nh vi√™n m·∫∑c ƒë·ªãnh (n·∫øu t·ªìn t·∫°i h·∫°ng ‚ÄúM·ªõi‚Äù)
    const defaultTier = await prisma.hang_thanh_vien.findFirst({ where: { ten_hang: 'M·ªõi' } });
    if (defaultTier) {
        await prisma.the_thanh_vien.create({
            data: {
                khach_hang_id: newUser.id,
                hang_thanh_vien_id: defaultTier.id,
                diem_tich_luy: 0, // ƒêi·ªÉm t√≠ch l≈©y ban ƒë·∫ßu
            },
        });
    }

    return newUser;
};

// --- üßë‚Äçüíº D·ªãch v·ª• cho Admin / Nh√¢n vi√™n ---

// üîê ƒêƒÉng nh·∫≠p cho Admin/Nh√¢n vi√™n (ph√¢n bi·ªát v·ªõi kh√°ch h√†ng)
export const loginAdmin = async (email: string, password: string) => {
    // T√¨m ng∆∞·ªùi d√πng l√† nh√¢n vi√™n c√≥ email tr√πng kh·ªõp
    const admin = await prisma.nguoi_dung.findFirst({
        where: {
            email,
            loai_nguoi_dung: UserType.Nh_n_Vi_n, // Ch·ªâ t√¨m ng∆∞·ªùi d√πng lo·∫°i nh√¢n vi√™n
        },
    });

    // N·∫øu kh√¥ng t√¨m th·∫•y ‚Üí b√°o l·ªói
    if (!admin) {
        throw new Error('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }

    // So s√°nh m·∫≠t kh·∫©u nh·∫≠p v√†o v·ªõi m·∫≠t kh·∫©u trong DB
    const isMatch = await bcrypt.compare(password, admin.mat_khau);
    if (!isMatch) {
        throw new Error('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }

    // T·∫°o token ƒëƒÉng nh·∫≠p cho admin
    const token = generateToken(admin);
    const { mat_khau, ...adminWithoutPassword } = admin; // Lo·∫°i b·ªè m·∫≠t kh·∫©u kh·ªèi d·ªØ li·ªáu tr·∫£ v·ªÅ

    return { admin: adminWithoutPassword, token };
};
